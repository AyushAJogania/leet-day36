class Solution {
public:
    int strongPasswordChecker(string password) {
        int n = password.size();
        int missingTypes = 3;
        if (any_of(password.begin(), password.end(), [](char c) { return islower(c); })) missingTypes--;
        if (any_of(password.begin(), password.end(), [](char c) { return isupper(c); })) missingTypes--;
        if (any_of(password.begin(), password.end(), [](char c) { return isdigit(c); })) missingTypes--;

        int changes = 0, oneRepeat = 0, twoRepeats = 0;
        for (int i = 2; i < n; i++) {
            if (password[i] == password[i - 1] && password[i - 1] == password[i - 2]) {
                int length = 2;
                while (i < n && password[i] == password[i - 1]) {
                    length++;
                    i++;
                }
                changes += length / 3;
                if (length % 3 == 0) oneRepeat++;
                if (length % 3 == 1) twoRepeats++;
                i--;
            }
        }

        if (n < 6) {
            return max(missingTypes, 6 - n);
        } else if (n <= 20) {
            return max(missingTypes, changes);
        } else {
            int deletions = n - 20;
            changes -= min(deletions, oneRepeat * 1) / 1;
            changes -= min(max(deletions - oneRepeat, 0), twoRepeats * 2) / 2;
            changes -= min(max(deletions - oneRepeat - 2 * twoRepeats, 0), changes * 3) / 3;
            return deletions + max(missingTypes, changes);
        }
    }
};
